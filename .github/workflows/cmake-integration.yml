name: CMake Build on Ubuntu, Windows and MacOS

on:
  push:
    branches: [ "feature/ci" ]
  pull_request:
    branches: [ "feature/ci" ]

jobs:

#################
#     Linux     #
#################

  build-linux:
    runs-on: ubuntu-22.04

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        build_type: [Release, Debug]
        c_compiler: [gcc, clang]

    steps:
    - uses: actions/checkout@v3

    - name: Install system dependencies
      run: |
        sudo apt update ;
        sudo apt install unzip libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev

    - name: Install conan
      run: >
        python3 -m venv ${{ github.workspace }}/.venv ;
        source ${{ github.workspace }}/.venv/bin/activate ;
        pip install conan==1.62.0 ;
        conan profile new default --detect ;
        conan profile update conf.tools.system.package_manager:mode=install default ;
        conan profile update conf.tools.system.package_manager:sudo=True default ;
        conan profile update settings.compiler.libcxx=libstdc++11 default

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install non-conan dependencies
      run: >
        mkdir -p ${{ github.workspace }}/deps ;
        mkdir -p ${{ github.workspace }}/tmp ;
        cd ${{ github.workspace }}/tmp ;
        wget https://github.com/Auburn/FastNoise2/archive/refs/tags/v0.10.0-alpha.zip ;
        unzip v0.10.0-alpha.zip ;
        cd FastNoise2-0.10.0-alpha ;
        cmake -B FastNoise2-0.10.0-alpha/build
        -DCMAKE_CXX_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ;
        cmake --build FastNoise2-0.10.0-alpha/build --config ${{ matrix.build_type }} ;
        cmake --install ${{ github.workspace }}/deps --config ${{ matrix.build_type }} ;
        ls ${{ github.workspace }}/deps

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        source ${{ github.workspace }}/.venv/bin/activate ;
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: >
        source ${{ github.workspace }}/.venv/bin/activate ;
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: >
        source ${{ github.workspace }}/.venv/bin/activate ;
        ctest --build-config ${{ matrix.build_type }}

###################
#     Windows     #
###################

  build-windows:
    runs-on: windows-2022

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        build_type: [Release, Debug]

    steps:
    - uses: actions/checkout@v3

    - name: Install conan
      run: >
        python3 -m venv ${{ github.workspace }}/.venv ;
        cd ${{ github.workspace }} ;
        .\.venv\Scripts\activate ;
        pip install conan==1.62.0 ;
        conan profile new default --detect ;
        conan profile update conf.tools.system.package_manager:mode=install default

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install non-conan dependencies
      run: >
        mkdir -p ${{ github.workspace }}/deps ;
        mkdir -p ${{ github.workspace }}/tmp ;
        cd ${{ github.workspace }}/tmp ;
        curl.exe -o FastNoise2-v0.10.0-alpha-Win64-MSVC.zip https://github.com/Auburn/FastNoise2/releases/download/v0.10.0-alpha/FastNoise2-v0.10.0-alpha-Win64-MSVC.zip ;
        ls ; echo "curl done" ;
        tar -xf ${{ github.workspace }}/tmp/FastNoise2-v0.10.0-alpha-Win64-MSVC.zip
        ls ;
        mv FastNoise2/* ${{ github.workspace }}/deps ;
        ls ${{ github.workspace }}/deps

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cd ${{ github.workspace }} ;
        .\.venv\Scripts\activate ;
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=cl
        -DCMAKE_C_COMPILER=cl
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: >
        cd ${{ github.workspace }} ;
        .\.venv\Scripts\activate ;
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: >
        cd ${{ github.workspace }} ;
        .\.venv\Scripts\activate ;
        ctest --build-config ${{ matrix.build_type }}

#################
#     MacOS     #
#################

  build-macos:
    runs-on: macos-12

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        build_type: [Release, Debug]
        c_compiler: [clang]

    steps:
    - uses: actions/checkout@v3

    - name: Install system dependencies
      run: |
        brew install unzip

    - name: Install conan
      run: >
        python3 -m venv ${{ github.workspace }}/.venv ;
        source ${{ github.workspace }}/.venv/bin/activate ;
        pip install conan==1.62.0 ;
        conan profile new default --detect ;
        conan profile update conf.tools.system.package_manager:mode=install default

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install non-conan dependencies
      run: >
        mkdir -p ${{ github.workspace }}/deps ;
        mkdir -p ${{ github.workspace }}/tmp ;
        cd ${{ github.workspace }}/tmp ;
        wget https://github.com/Auburn/FastNoise2/releases/download/v0.10.0-alpha/FastNoise2-v0.10.0-alpha-MacOS64-Clang.zip ;
        unzip FastNoise2-v0.10.0-alpha-MacOS64-Clang.zip ;
        mv FastNoise2/* ${{ github.workspace }}/deps

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        source ${{ github.workspace }}/.venv/bin/activate ;
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=clang
        -DCMAKE_C_COMPILER=clang
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: >
        source ${{ github.workspace }}/.venv/bin/activate ;
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: >
        source ${{ github.workspace }}/.venv/bin/activate ;
        ctest --build-config ${{ matrix.build_type }}
